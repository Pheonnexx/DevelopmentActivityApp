describe("MultivariateTest",function(){beforeEach(function(){GOVUK.cookie=jasmine.createSpy("GOVUK.cookie"),window._gaq=[]}),describe("#run",function(){it("should pick a random cohort on first run",function(){GOVUK.cookie.andReturn(null);{var e=jasmine.createSpy("fooSpy"),o=jasmine.createSpy("barSpy");new GOVUK.MultivariateTest({name:"stuff",customVarIndex:1,cohorts:{foo:{callback:e},bar:{callback:o}}})}expect(GOVUK.cookie.callCount).toEqual(2),expect(GOVUK.cookie.argsForCall[1][0]).toEqual("multivariatetest_cohort_stuff"),"foo"==GOVUK.cookie.argsForCall[1][1]?expect(e).toHaveBeenCalled():expect(o).toHaveBeenCalled()}),it("should use an existing cohort choice on subsequent runs",function(){GOVUK.cookie.andReturn("foo");{var e=jasmine.createSpy("fooSpy"),o=jasmine.createSpy("barSpy");new GOVUK.MultivariateTest({name:"stuff",customVarIndex:1,cohorts:{foo:{callback:e},bar:{callback:o}}})}expect(e).toHaveBeenCalled()}),it("should set a custom var",function(){GOVUK.cookie.andReturn("foo");new GOVUK.MultivariateTest({name:"stuff",customVarIndex:1,cohorts:{foo:{},bar:{}},customVarIndex:2});expect(window._gaq).toEqual([["_setCustomVar",2,"multivariatetest_cohort_stuff","foo",2],["_trackEvent","multivariatetest_cohort_stuff","run","-",0,!0]])}),it("should set html for a cohort",function(){GOVUK.cookie.andReturn("foo");{var e=$("<div>");new GOVUK.MultivariateTest({name:"stuff",customVarIndex:1,el:e,cohorts:{foo:{html:"foo"},bar:{html:"bar"}}})}expect(e.html()).toEqual("foo")}),it("should call the callback for a cohort",function(){var e=jasmine.createSpy("fooSpy"),o=jasmine.createSpy("barSpy");GOVUK.cookie.andReturn("bar");{var t=$("<div>");new GOVUK.MultivariateTest({name:"stuff",customVarIndex:1,el:t,cohorts:{foo:{callback:e},bar:{callback:o}}})}expect(o).toHaveBeenCalled()}),it("should call the callback for a cohort if it is a string",function(){GOVUK.cookie.andReturn("foo");var e=new GOVUK.MultivariateTest({name:"stuff",customVarIndex:1,cohorts:{foo:{callback:"fooCallback"},bar:{}},runImmediately:!1});e.fooCallback=jasmine.createSpy("fooCallback"),e.run(),expect(e.fooCallback).toHaveBeenCalled()}),it("should assign a new random cohort if the assigned cohort does not exist",function(){var e=jasmine.createSpy("fooSpy"),o=jasmine.createSpy("barSpy");GOVUK.cookie.andReturn("baz");new GOVUK.MultivariateTest({name:"stuff",customVarIndex:1,cohorts:{foo:{callback:e},bar:{callback:o}}});"foo"==GOVUK.cookie.argsForCall[1][1]?expect(e).toHaveBeenCalled():expect(o).toHaveBeenCalled()})}),describe("#weightedCohortNames",function(){it("should return the weighted names of the cohorts when no weights are defined",function(){var e=new GOVUK.MultivariateTest({name:"stuff",customVarIndex:1,cohorts:{foo:{},bar:{},baz:{}}});expect(e.weightedCohortNames()).toEqual(["foo","bar","baz"])}),it("should return the weighted names of the cohorts when weights are defined",function(){var e=new GOVUK.MultivariateTest({name:"stuff",customVarIndex:1,cohorts:{foo:{weight:2},bar:{weight:1},baz:{weight:3}}});expect(e.weightedCohortNames()).toEqual(["foo","foo","bar","baz","baz","baz"])}),it("should return the weighted names of the cohorts using default weighting",function(){var e=new GOVUK.MultivariateTest({name:"stuff",customVarIndex:1,defaultWeight:2,cohorts:{foo:{},bar:{},baz:{}}});expect(e.weightedCohortNames()).toEqual(["foo","foo","bar","bar","baz","baz"])}),it("should return the weighted names of the cohorts using default weighting or defined weighting",function(){var e=new GOVUK.MultivariateTest({name:"stuff",customVarIndex:1,defaultWeight:2,cohorts:{foo:{},bar:{weight:1},baz:{}}});expect(e.weightedCohortNames()).toEqual(["foo","foo","bar","baz","baz"])})}),describe("#chooseRandomCohort",function(){it("should choose a random cohort",function(){var e=new GOVUK.MultivariateTest({name:"stuff",customVarIndex:1,cohorts:{foo:{},bar:{}}});expect(["foo","bar"]).toContain(e.chooseRandomCohort())})})});